<launch>

  <!-- "camera" should uniquely identify the device. All topics are pushed down
       into the "camera" namespace, and it is prepended to tf frame ids. -->
  <arg name="camera" default="openni" />
  <arg name="rgb_frame_id"   default="/$(arg camera)_rgb_optical_frame" />
  <arg name="depth_frame_id" default="/$(arg camera)_depth_optical_frame" />

  <!-- device_id can have the following formats:
         "#1"              : Use first device found
         "2@3"             : Use device on USB bus 2, address 3
         "B00367707227042B": Use device with given serial number
    -->
  <arg name="device_id" default="#1" />

  <!-- By default, calibrations are stored to file://${ROS_HOME}/camera_info/${NAME}.yaml,
       where ${NAME} is of the form "[rgb|depth]_[serial#]", e.g. "depth_B00367707227042B".
       See camera_info_manager docs for calibration URL details. -->
  <arg name="rgb_camera_info_url"   default="" />
  <arg name="depth_camera_info_url" default="" />

  <!-- Arguments for remapping "rgb", "depth", "depth_registered" namespaces -->
  <arg name="rgb"              default="rgb" />
  <arg name="ir"               default="ir" />
  <arg name="depth"            default="depth" />
  <arg name="depth_registered" default="depth_registered" />
  <arg name="projector"        default="projector" />

  <!-- Disable bond topics by default -->
  <arg name="bond" default="false" />
  <arg if="$(arg bond)" name="bond_arg" value="" />
  <arg unless="$(arg bond)" name="bond_arg" value="--no-bond" />

  <!-- Optionally launch manager in GDB, for debugging -->
  <arg name="debug" default="false" />
  <arg if="$(arg debug)" name="launch_prefix" value="xterm -e gdb --args" />
  <arg unless="$(arg debug)" name="launch_prefix" value="" />
  <!-- Also globally disable bond heartbeat timeout in debug mode, so everything
       doesn't die when you hit a break point -->
  <param if="$(arg debug)" name="/bond_disable_heartbeat_timeout" value="true" />

  <!-- Nodelet manager, lives in top-level namespace -->
  <arg name="manager" value="$(arg camera)_nodelet_manager" />
  <node pkg="nodelet" type="nodelet" name="$(arg manager)" args="manager"
        output="screen" launch-prefix="$(arg launch_prefix)" />

  <!-- Push down all topics/nodelets into "camera" namespace -->
  <group ns="$(arg camera)">

	<rosparam ns="driver">
depth_registration: true
depth_mode: 2
image_mode: 2
data_skip: 10
</rosparam>

    <!-- Load driver and processing nodelets in standard configuration -->
    <include file="$(find openni_launch)/launch/includes/device.launch">
      <!-- Could really use some syntactic sugar for this -->
      <arg name="manager"               value="/$(arg manager)" /> <!-- Fully resolved -->
      <arg name="device_id"             value="$(arg device_id)" />
      <arg name="rgb_frame_id"          value="$(arg rgb_frame_id)" />
      <arg name="depth_frame_id"        value="$(arg depth_frame_id)" />
      <arg name="rgb_camera_info_url"   value="$(arg rgb_camera_info_url)" />
      <arg name="depth_camera_info_url" value="$(arg depth_camera_info_url)" />
      <arg name="rgb"                   value="$(arg rgb)" />
      <arg name="ir"                    value="$(arg ir)" />
      <arg name="depth"                 value="$(arg depth)" />
      <arg name="depth_registered"      value="$(arg depth_registered)" />
      <arg name="projector"             value="$(arg projector)" />
      <arg name="bond"                  value="$(arg bond_arg)" />
    </include>

  </group> <!-- camera -->



	<node pkg="pcl_to_scan" type="kinect_tf_broadcaster.py" name="kinect_tf_broadcaster">
		<param name="pitch"  value="-0.46"/>
		<param name="roll"  value="-0.04"/>
	</node>

	<!-- throttling -->

	<!--
	<node pkg="nodelet" type="nodelet" name="pointcloud_throttle" args="load pcl_to_scan/CloudThrottle /$(arg manager)">
		<param name="max_rate" value="2"/>
		<remap from="cloud_in" to="/camera/depth/points"/>
		<remap from="cloud_out" to="cloud_throttled"/>
	</node>	
	
	-->
	
	<!-- Run a passthrough filter to transform cloud -->
	
	<!--
	<node pkg="nodelet" type="nodelet" name="passthrough" args="load pcl/PassThrough /$(arg manager)" output="screen">
		<remap from="~input" to="cloud_throttled" />
		<remap from="~output" to="cloud_transformed" />
		<param name="output_frame" value="/base_link" />
		<rosparam>
filter_field_name: z
filter_limit_min: 0.01
filter_limit_max: 10
filter_limit_negative: False
</rosparam>
	</node>
	
	-->
	
	<!--
	
	<node pkg="nodelet" type="nodelet" name="hole_detector" args="load pcl_to_scan/HoleDetector /$(arg manager)" output="screen">
		<remap from="input" to="cloud_transformed" />
		<remap from="output" to="cloud_holes" /> 
		<param name="threshold" value="-0.03"/>
	</node>
-->
</launch>
